node {
	/* Default to no violations. Used to specify whether no violations vs. violations
	   message is sent. */
	violations = false

	/* Cloning the Repository to jenkins-docker Workspace */
	stage('Clone repository') {
			checkout scm
	}

	stage('YAML Deployment lint') {
		sshagent(['stephane_ssh_key']) {
			sh "scp -o StrictHostKeyChecking=no bad/deployment.yaml stephane@192.168.1.97:/k8s/dev/"
			try{
				sh "ssh stephane@192.168.1.97 yamllint /k8s/dev/deployment.yaml"
			}
			catch(error){
				echo "YAML syntax is incorrect"
			}
		}
	}

	stage('Validate K8s-object') {
		try {
			echo "Validate stage... Starting validate test for deployment.yaml."
			sh '/var/jenkins_home/app/cbctl k8s-object validate -f bad/deployment.yaml >validation_result.txt'
		}

		catch (err) {
			violations = true
			echo "Build detected cbctl violations. Review Cbctl scan results."
			slackSend(channel: "#build-alerts", blocks: blocks_fail)
			slackUploadFile filePath: "validation_result.txt", initialComment: ""
			echo "Violations occured. results of cbctl validate can be found in  validation_result.txt.txt"
			error("Failed Deployment due to CB Container policy violations.")

		}

		// If no CBC K8s policy violations; confirm successful build via Slack - move to deployment of validated k8
		if(violations == false) {
			echo "No violations occured - keen!"
			sh "python3 /var/jenkins_home/app/success.py '${env.JOB_NAME}' '${env.BUILD_NUMBER}'"
		}

	}
}
